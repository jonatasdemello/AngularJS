
1.Npm
https://www.npmjs.com/

2.Grunt cli global
http://gruntjs.com/getting-started

3.Bower
https://www.npmjs.com/package/bower

4.Yeoman
http://yeoman.io/

	Grunt:
	http://24ways.org/2013/grunt-is-not-weird-and-hard/
	https://css-tricks.com/video-screencasts/130-first-moments-grunt/
	http://mattbailey.io/a-beginners-guide-to-grunt-redux/
	
	https://github.com/jasmine/jasmine
	http://philipwalton.com/articles/introducing-html-inspector/
	http://jshint.com/
	http://csslint.net/
	http://leanmeanfightingmachine.github.io/dploy/

	https://css-tricks.com/cross-browser-css-injection/
	
	


<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>

AngularJS extends HTML with ng-directives.

The ng-app directive defines an AngularJS application.
The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.
The ng-bind directive binds application data to the HTML view.

The ng-app directive initializes an AngularJS application.
The ng-init directive initializes application data.
The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.


The ng-app Directive
The ng-app directive defines the root element of an AngularJS application.
The ng-app directive will auto-bootstrap (automatically initialize) the application when a web page is loaded.
Later you will learn how ng-app can have a value (like ng-app="myModule"), to connect code modules.

The ng-init Directive
The ng-init directive defines initial values for an AngularJS application.
Normally, you will not use ng-init. You will use a controller or module instead.
You will learn more about controllers and modules later.

The ng-model Directive
The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.
The ng-model directive can also:

Provide type validation for application data (number, email, required).
Provide status for application data (invalid, dirty, touched, error).
Provide CSS classes for HTML elements.
Bind HTML elements to HTML forms.
The ng-repeat Directive
The ng-repeat directive clones HTML elements once for each item in a collection (in an array).


Ionic
	https://www.airpair.com/ionic-framework/posts/the-definitive-ionic-starter-guide

https://www.airpair.com/angularjs/posts/ng-directive-componentization-composition
https://www.airpair.com/angularjs/posts/unit-testing-angularjs-applications
https://www.airpair.com/angularjs/posts/unit-testing-angularjs-applications



http://gooseberrycreative.com/cmder/

Web Developer Workflow (1 of 10) 
	https://www.youtube.com/watch?v=5hkyWkxFVLs
	
YEOMAN TUTORIAL - Master Front-End Workflow with Yeoman, Grunt and Bower
	https://www.youtube.com/watch?t=444&v=gKiaLSJW5xI
	https://www.youtube.com/watch?v=gLa2LxMdAPs&list=PLoYCgNOIyGAApoDfJHjmMgGNlYenKg5jO
	https://www.youtube.com/watch?v=gLa2LxMdAPs&list=PLoYCgNOIyGAApoDfJHjmMgGNlYenKg5jO
	&index=3&feature=iv&src_vid=gKiaLSJW5xI&annotation_id=annotation_2064858547
	

How to Combine Backend and Front End Testing
	https://www.youtube.com/watch?v=An8dJf7056E


http://www.nunit.org/index.php?p=documentation
http://docs.seleniumhq.org/
https://github.com/bfirsh/needle

automated test front end
http://stackoverflow.com/questions/4043706/automated-testing-of-css-and-html-front-end-coding

http://yeoman.io/learning/index.html
https://www.airpair.com/js/using-angularjs-yeoman

http://code.tutsplus.com/tutorials/building-apps-with-the-yeoman-workflow--net-33254

npm install grunt --save-dev
npm install -g grunt-contrib-compass 
npm install -g compass
npm install
bower install
npm install  grunt-google-cdn


1. npm install -g generator-angular
2. yo angular
3. bower install angular-ui
4. npm install grunt-contrib-compass
5. reinstall ruby gem installer 1.9.3 with checked all checkbox
6. on ruby console - gem install sass
7. on ruby console - gem install compass
8. grunt test
9. grunt serve
10 .grunt

bower install
npm install

$ npm install -g yo
$ npm install -g generator-webapp
$ yo webapp

app/ is where your pure, non-compiled, non-minified source code lives.
app/scripts/ is where your JavaScript goes. You're free to create sub-directories and even use CoffeeScript if that's your cup of tea. That didn't make sense. Again. You're free to use TeaScript if that's your cup of coffee. Nope.
app/styles/ is where your CSS goes. Again, sub-directories, LESS, Sass, whatevs.
app/index.html is the non-minified version of index.html that will eventually be squashed and delivered to the client. More on that later.
Gruntfile.js has all of the build, server, and test tasks defined.


http://code.tutsplus.com/tutorials/building-apps-with-the-yeoman-workflow--net-33254

npm install -g generator-webapp

# create new app
yo webapp

This is actually a separate plug-in, or "generator," called generator-webapp. Yeoman recognizes other generator-____ Node modules, which opens the door for using Backbone, AngularJS, and countless other you-name-it generators.

Tasks are run through the command line, by typing 
grunt server
grunt build
grunt test

Tasks are defined and customized in a Gruntfile.js file, which lives in the root directory of your project. Check it out to see what Yeoman set up for you.

The component is then saved in a directory of your choosing, generally, app/bower_components/ for Yeoman-generated apps. Assuming you wanted jQuery, you would run the bower install query command, then include the relevant file inside of your HTML file. 
In our case, <script src="bower_components/jquery/jquery.js"></script>

$ npm install -g yo
$ npm install -g generator-webapp
$ yo webapp


What you're looking at is the most common application structure a Yeoman generator will produce.

app/ is where your pure, non-compiled, non-minified source code lives.
app/scripts/ is where your JavaScript goes. You're free to create sub-directories and even use CoffeeScript if that's your cup of tea. That didn't make sense. Again. You're free to use TeaScript if that's your cup of coffee. Nope.
app/styles/ is where your CSS goes. Again, sub-directories, LESS, Sass, whatevs.
app/index.html is the non-minified version of index.html that will eventually be squashed and delivered to the client. More on that later.
Gruntfile.js has all of the build, server, and test tasks defined.


grunt build
Running grunt build takes your app/ source code files and turns them into a distributable application, which ends up in dist/.

grunt server


The aforementioned "several other Grunt tasks" are:

clean: Yeoman stores some stuff in a .tmp folder. That will be wiped out.
coffee: Compiles your CoffeeScript files from app/scripts.
compass: Compiles your Sass files from app/styles.
connect: Creates a local server, watches for changes to your source files, then triggers a reload in your browser.
open: Opens the server instance, typically localhost:9000 in your browser.


https://www.airpair.com/js/using-angularjs-yeoman

	$ npm install -g yo
	$ npm install -g generator-angular
	
	$ mkdir hello
	$ cd hello

grunt server 
	starts the server task and loads our Angular app in the browser for development. 

grunt build 
	prepares the app for deployment, minifying code and HTML, compressing images, and concatenating and compressing CSS and JS files. 
	
	
http://yeoman.io/learning/index.html


# install the Backbone generator:
$ npm install -g generator-backbone
 
# make another play directory, then do these things:
$ yo backbone
