AngularJS

http://www.ng-newsletter.com/posts/beginner2expert-how_to_start.html


What did we just do? We wrote code to teach the browser a new HTML element <app-info>, and used it in the view to display each app's details.

First in js/directives/appInfo.js, we made a new directive. 
We used app.directive to create a new directive named 'appInfo'. 
It returns an object with three options:
 - restrict specifies how the directive will be used in the view. The 'E' means it will be used as a new HTML element.
 - scope specifies that we will pass information into this directive through an attribute named info. 
	The = tells the directive to look for an attribute named info in the <app-info> element, like this:
	<app-info info="shutterbugg"></app-info>
	The data in info becomes available to use in the template given by templateURL.
- templateUrl specifies the HTML to use in order to display the data in scope.info. Here we use the HTML in js/directives/appInfo.html.

Looking at js/directives/appInfo.html, we define the HTML to display details about an app, like its title and price. We use expressions and filters to display the data.

Then in index.html we use the new directive as the HTML element <app-info>. We pass in objects from the controller's scope ($scope.shutterbugg) into the <app-info> element's info attribute so that it displays.

Why is creating your own directives useful?

Readability. Directives let you write expressive HTML. Looking at index.html you can understand the app's behavior just by reading the HTML.
Reusability. Directives let you create self-contained units of functionality. We could easily plug in this directive into another AngularJS app and avoid writing a lot of repetitive HTML.


We used app.directive to create a new directive named 'installApp'.

The directive contains the three options restrict, scope, and templateUrl that we saw before in the 'appInfo' directive.
It also contains a fourth option link. The link is used to create interactive directives that respond to user actions.
The link function takes three inputs:

scope refers to the directive's scope. Any new properties attached to $scope will become available to use in the directive's template.
element refers to the directive's HTML element.
attrs contains the element's attributes.
Inside the link function, there are two properties buttonText and installed, and the function download(). We'll use these in the directive's template next.

The template uses Angular's built-in ng-click directive. When the button is clicked, ng-click will tell AngularJS to run the download() function in the directive.

The download() function uses the scope.installed property to check if an app is installed. When an app is installed, download() does three things:

toggles the .btn-active class
changes the button text to "Uninstall"
changes scope.installed to true


What can we generalize so far?

Directives are a powerful way to create self-contained, interactive components. Unlike jQuery which adds interactivity as a layer on top of HTML, AngularJS treats interactivity as a native component of HTML.


SERVICES
So far we've made AngularJS apps by adding data to a controller, and then displaying it in a view.

But what happens when the data contains hundreds of items, or if it's constantly changing like weather or financial data? Hardcoding data into a controller won't work anymore.

A better solution is to read the live data from a server. We can do this by creating a service.

https://s3.amazonaws.com/codecademy-content/courses/ltp4/forecast-api/forecast.json


Well done! The city_name now shows up in the view. How does it work?

First in js/services/forecast.js, we made a new service. We used app.factory to create a new service named forecast
The forecast service needs to use AngularJS's built-in $http to fetch JSON from the server. Therefore, we add $http to the forecast service as a dependency, like this:
 ['$http', function($http) {
   // ...
 }]
Now $http is available to use inside forecast.
Then, inside forecast, we use $http to construct an HTTP GET request for the weather data. If the request succeeds, the weather data is returned; otherwise the error info is returned.
Next in the controller, we used the forecast service to fetch data from the server. First we added forecast into MainController as a dependency so that it's available to use. Then within the controller we used forecast to asynchronously fetch the weather data from the server and store it into $scope.fiveDay
As before, any properties attached to $scope become available to use in the view. This means in index.html, we can display the city_name using an expression as done before.


Why are services useful? Instead of filling the controller with code to fetch weather data from a server, it's better to move this independent logic into a service so that it can be reused by other parts of the app.

What can we generalize so far?

Directives are a way to make standalone UI components, like <app-info>
Services are a way to make standalone communication logic, like forecast which fetches weather data from a server



*** https://github.com/hackreactor/intro-coding
